// File generated from our OpenAPI spec by Stainless.

package com.openlayer.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InferencePipelineUpdateResponseTest {

    @Test
    fun createInferencePipelineUpdateResponse() {
        val inferencePipelineUpdateResponse =
            InferencePipelineUpdateResponse.builder()
                .id("3fa85f64-5717-4562-b3fc-2c963f66afa6")
                .dateCreated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                .dateLastEvaluated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                .dateLastSampleReceived(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                .dateOfNextEvaluation(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                .dateUpdated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                .description("This pipeline is used for production.")
                .failingGoalCount(1L)
                .links(
                    InferencePipelineUpdateResponse.Links.builder()
                        .app(
                            "https://app.openlayer.com/myWorkspace/3fa85f64-5717-4562-b3fc-2c963f66afa6/inference-pipeline/3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        )
                        .build()
                )
                .name("production")
                .passingGoalCount(5L)
                .projectId("3fa85f64-5717-4562-b3fc-2c963f66afa6")
                .status(InferencePipelineUpdateResponse.Status.QUEUED)
                .statusMessage("Tests successfully evaluated")
                .totalGoalCount(6L)
                .project(
                    InferencePipelineUpdateResponse.Project.builder()
                        .id("3fa85f64-5717-4562-b3fc-2c963f66afa6")
                        .creatorId("589ece63-49a2-41b4-98e1-10547761d4b0")
                        .dateCreated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                        .dateUpdated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                        .developmentGoalCount(5L)
                        .goalCount(10L)
                        .inferencePipelineCount(1L)
                        .links(
                            InferencePipelineUpdateResponse.Project.Links.builder()
                                .app(
                                    "https://app.openlayer.com/myWorkspace/3fa85f64-5717-4562-b3fc-2c963f66afa6"
                                )
                                .build()
                        )
                        .monitoringGoalCount(5L)
                        .name("My Project")
                        .source(InferencePipelineUpdateResponse.Project.Source.WEB)
                        .taskType(InferencePipelineUpdateResponse.Project.TaskType.LLM_BASE)
                        .versionCount(2L)
                        .workspaceId("055fddb1-261f-4654-8598-f6347ee46a09")
                        .description("My project description.")
                        .gitRepo(
                            InferencePipelineUpdateResponse.Project.GitRepo.builder()
                                .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                .dateConnected(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .dateUpdated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .gitAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                .gitId(0L)
                                .name("name")
                                .private_(true)
                                .projectId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                .slug("slug")
                                .url("url")
                                .branch("branch")
                                .rootDir("rootDir")
                                .build()
                        )
                        .build()
                )
                .workspace(
                    InferencePipelineUpdateResponse.Workspace.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .creatorId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .dateCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dateUpdated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .inviteCount(0L)
                        .memberCount(0L)
                        .name("Openlayer")
                        .periodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .periodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .projectCount(0L)
                        .slug("openlayer")
                        .status(InferencePipelineUpdateResponse.Workspace.Status.ACTIVE)
                        .inviteCode("inviteCode")
                        .monthlyUsage(
                            listOf(
                                InferencePipelineUpdateResponse.Workspace.MonthlyUsage.builder()
                                    .executionTimeMs(0L)
                                    .monthYear(LocalDate.parse("2019-12-27"))
                                    .predictionCount(0L)
                                    .build()
                            )
                        )
                        .samlOnlyAccess(true)
                        .wildcardDomains(listOf("string"))
                        .build()
                )
                .workspaceId("055fddb1-261f-4654-8598-f6347ee46a09")
                .build()
        assertThat(inferencePipelineUpdateResponse).isNotNull
        assertThat(inferencePipelineUpdateResponse.id())
            .isEqualTo("3fa85f64-5717-4562-b3fc-2c963f66afa6")
        assertThat(inferencePipelineUpdateResponse.dateCreated())
            .isEqualTo(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
        assertThat(inferencePipelineUpdateResponse.dateLastEvaluated())
            .contains(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
        assertThat(inferencePipelineUpdateResponse.dateLastSampleReceived())
            .contains(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
        assertThat(inferencePipelineUpdateResponse.dateOfNextEvaluation())
            .contains(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
        assertThat(inferencePipelineUpdateResponse.dateUpdated())
            .isEqualTo(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
        assertThat(inferencePipelineUpdateResponse.description())
            .contains("This pipeline is used for production.")
        assertThat(inferencePipelineUpdateResponse.failingGoalCount()).isEqualTo(1L)
        assertThat(inferencePipelineUpdateResponse.links())
            .isEqualTo(
                InferencePipelineUpdateResponse.Links.builder()
                    .app(
                        "https://app.openlayer.com/myWorkspace/3fa85f64-5717-4562-b3fc-2c963f66afa6/inference-pipeline/3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    )
                    .build()
            )
        assertThat(inferencePipelineUpdateResponse.name()).isEqualTo("production")
        assertThat(inferencePipelineUpdateResponse.passingGoalCount()).isEqualTo(5L)
        assertThat(inferencePipelineUpdateResponse.projectId())
            .isEqualTo("3fa85f64-5717-4562-b3fc-2c963f66afa6")
        assertThat(inferencePipelineUpdateResponse.status())
            .isEqualTo(InferencePipelineUpdateResponse.Status.QUEUED)
        assertThat(inferencePipelineUpdateResponse.statusMessage())
            .contains("Tests successfully evaluated")
        assertThat(inferencePipelineUpdateResponse.totalGoalCount()).isEqualTo(6L)
        assertThat(inferencePipelineUpdateResponse.project())
            .contains(
                InferencePipelineUpdateResponse.Project.builder()
                    .id("3fa85f64-5717-4562-b3fc-2c963f66afa6")
                    .creatorId("589ece63-49a2-41b4-98e1-10547761d4b0")
                    .dateCreated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                    .dateUpdated(OffsetDateTime.parse("2024-03-22T11:31:01.185Z"))
                    .developmentGoalCount(5L)
                    .goalCount(10L)
                    .inferencePipelineCount(1L)
                    .links(
                        InferencePipelineUpdateResponse.Project.Links.builder()
                            .app(
                                "https://app.openlayer.com/myWorkspace/3fa85f64-5717-4562-b3fc-2c963f66afa6"
                            )
                            .build()
                    )
                    .monitoringGoalCount(5L)
                    .name("My Project")
                    .source(InferencePipelineUpdateResponse.Project.Source.WEB)
                    .taskType(InferencePipelineUpdateResponse.Project.TaskType.LLM_BASE)
                    .versionCount(2L)
                    .workspaceId("055fddb1-261f-4654-8598-f6347ee46a09")
                    .description("My project description.")
                    .gitRepo(
                        InferencePipelineUpdateResponse.Project.GitRepo.builder()
                            .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .dateConnected(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .dateUpdated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .gitAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .gitId(0L)
                            .name("name")
                            .private_(true)
                            .projectId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .slug("slug")
                            .url("url")
                            .branch("branch")
                            .rootDir("rootDir")
                            .build()
                    )
                    .build()
            )
        assertThat(inferencePipelineUpdateResponse.workspace())
            .contains(
                InferencePipelineUpdateResponse.Workspace.builder()
                    .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .creatorId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .dateCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dateUpdated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .inviteCount(0L)
                    .memberCount(0L)
                    .name("Openlayer")
                    .periodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .periodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .projectCount(0L)
                    .slug("openlayer")
                    .status(InferencePipelineUpdateResponse.Workspace.Status.ACTIVE)
                    .inviteCode("inviteCode")
                    .monthlyUsage(
                        listOf(
                            InferencePipelineUpdateResponse.Workspace.MonthlyUsage.builder()
                                .executionTimeMs(0L)
                                .monthYear(LocalDate.parse("2019-12-27"))
                                .predictionCount(0L)
                                .build()
                        )
                    )
                    .samlOnlyAccess(true)
                    .wildcardDomains(listOf("string"))
                    .build()
            )
        assertThat(inferencePipelineUpdateResponse.workspaceId())
            .contains("055fddb1-261f-4654-8598-f6347ee46a09")
    }
}
